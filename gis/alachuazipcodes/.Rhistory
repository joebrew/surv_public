blneuroq <- quantile(dist$neuro, c(.05, .95), na.rm=T)
blrashq <- quantile(dist$rash, c(.05, .95), na.rm=T)
blrespq <- quantile(dist$resp, c(.05, .95), na.rm=T)
###################
#GEOGRAPHICAL FLAG
###################
geoCluster <- as.data.frame(zip$Zipcode)
colnames(geoCluster) <- "Zipcode"
for (i in tolower(symnames)){
geoCluster[,i] <- ""
}
#I SHOULD BE USING REGRESSION!!!!
#for (i in zip$Zipcode){
#  for (j in tolower(symnames)){
#    heat[,paste0(j,i)] <- NA  }}
#for (i in zip$Zipcode){
#for (j in tolower(symnames)){
#    for (k in heat$Date){
#      heat[which(heat$Date == k),
#           paste0(j,i)] <-
#        nrow(symOld[which(symOld$cat == j &
#                            symOld$Zipcode == i &
#                            symOld$Date == k),])}}}
#save.image("E:/fdoh/private/blablabla.RDATA")
#I want to flag any zipcode with a symptom incidence of
#greater than 4 cases (at 125% level)
#or greater than 2 cases (at 150% level)
#or greater than 1 case (at 200% level)
for (i in tolower(symnames)){
for (j in geoCluster$Zipcode){
geoCluster[which(geoCluster$Zipcode == j), i] <-
ifelse(zip[which(zip$Zipcode == j),paste0(i, "per")] > 1.25 &
zip[which(zip$Zipcode == j), i] > 4,
"CHECK",
ifelse(zip[which(zip$Zipcode == j),paste0(i, "per")] > 1.5 &
zip[which(zip$Zipcode == j), i] > 2,
"CHECK",
ifelse(zip[which(zip$Zipcode == j),paste0(i, "per")] > 2 &
zip[which(zip$Zipcode == j), i] > 1,
"CHECK",
"")))
}
}
###################
#RECORD OF INTEREST TABLES
###################
roc <- roi[c("Date", "Age", "MedRecNo", "Sex", "CCDD", "Region", "Hospital")]
roc$Date <- as.character(roc$Date)
###################
#MAP PARAMETERS
###################
#joewatercolor <- openmap(c(29.96, -82.7), c(29.35,-81.9),
#                         type="stamen-watercolor")
#joemapwatercolor <- openproj(joewatercolor, projection = "+proj=longlat")
###################
#WORD CLOUD
###################
remove <- "[|]|[(]|[])]|/|;|:|[(*]|&|-[)]|[(]|[-]|[--])"
myWords <- unlist(strsplit(as.character(gsub(remove,"",
toupper(alless$CCDD[which(alless$Date == yesterday)]))), " "))
myWordsBL <- unlist(strsplit(as.character(gsub(remove,"",
toupper(alless1213$CCDD[which(alless1213$bl == TRUE)]))), " "))
myWordsDF <- as.data.frame(table(myWords))
colnames(myWordsDF) <- c("word","count")
myWordsBLDF <- as.data.frame(table(myWordsBL))
colnames(myWordsBLDF) <- c("word","count")
combinedDF <- rbind(myWordsDF, myWordsBLDF)
myWordsTable <- table(myWords)
myWordsBLTable <- table(myWordsBL)
combinedWords <- c(myWords, myWordsBL)
myCloud <- as.data.frame(as.character(unique(sort(combinedWords))))
colnames(myCloud) <- "word"
myCloud$recent <- 0
for (i in myCloud$word){
myCloud$recent[which(myCloud$word == i)] <-
sum(myWordsDF$count[which(myWordsDF$word == i)])}
myCloud$bl <- 0
for (i in myCloud$word){
myCloud$bl[which(myCloud$word == i)] <-
sum(myWordsBLDF$count[which(myWordsBLDF$word == i)])/
length(unique(sort(alless1213$Date[which(alless1213$bl == TRUE)])))}
myCloud$prop <- 1+ ((myCloud$recent+0.9) / (myCloud$bl+0.9))
myCloud$color <- ifelse(myCloud$recent <1,
"grey",
"black")
myCloud <- myCloud[which(myCloud$recent >0),]
myCloud <- myCloud[order(myCloud$prop),]
myCloud$word <- as.character(myCloud$word)
myCloud <- myCloud[which(nchar(myCloud$word) > 1),]
myCloud$recentCubicRoot <- myCloud$recent^(1/3)
myCloud$colorCat<- cut(myCloud$recentCubicRoot, 9, labels=FALSE)
cloudColors <- colorRampPalette(brewer.pal(9, "Blues"))(11)
cloudColors <- rev(cloudColors[1:11])
myCloud$color <- cloudColors[myCloud$colorCat]
myCloud <- myCloud[which(regexpr(paste0("AND|CANT|TODAY|ENCOUNTER|WITHOUT|",
"NOT|OF|LIKE|THERAPY|UNSPECIFIED|OR|IN",
"THIS|INITIAL|AT"), myCloud$word) <1),]
wordcloud(words=myCloud$word,
freq=myCloud$prop^3,
scale=c(2,0.00001),
max.words=Inf,
random.order=FALSE,
rot.per=0,
colors=myCloud$color[order(myCloud$prop^3)],
ordered.colors=FALSE)
###################
#FLAG TABLE
###################
#FUNCTION TO CONVERT TEXT TO REGEXPR SEARCH TERM
regexFun <- function(x){
paste(substr(x,1,5),"*","|",
tolower(substr(x,1,5)),"*|",
capwords(tolower(substr(x, 1,5))),"*",sep="", collapse=NULL)}
wordsOfInterest <- as.data.frame(myCloud[which(ifelse(myCloud$bl <=0,
myCloud$recent >= 3,
myCloud$recent > 3*(myCloud$bl)) &
myCloud$recent >= 3),])
wordsOfInterest <- wordsOfInterest[order(wordsOfInterest$recent,
decreasing=TRUE),]
flag <- as.data.frame(cbind(wordsOfInterest$word,
wordsOfInterest$recent,
round(wordsOfInterest$bl, digits=2)))
colnames(flag) <- c("Word", "Yesterday", "Baseline")
flag$Baseline <- as.numeric(as.character(flag$Baseline))
#CAPITALIZE FIRST LETTER FUNCTION
capwords <- function(s, strict = FALSE) {
cap <- function(s) paste(toupper(substring(s, 1, 1)),
{s <- substring(s, 2); if(strict) tolower(s) else s},
sep = "", collapse = " " )
sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))}
#CREATE SEARCH TERMS
heat30 <- heat[which(heat$Date > max(heat$Date)-30),]
flagSearch <- as.data.frame(matrix(rep(NA, length(flag$Word)*30), nrow=30))
colnames(flagSearch) <-flag$Word
flagSearch <- cbind(heat30$Date, flagSearch)
colnames(flagSearch)[1] <- "Date"
newColStart <- length(colnames(heat30))+1
newColEnd <- length(colnames(heat30))+length(flagSearch$Word)
#colnames(heat30)[newColStart:newColEnd] <-  flagSearch$Word
for(i in flagSearch$Date){
for (j in colnames(flagSearch[2:(length(flag$Word)+1)])){
flagSearch[which(flagSearch$Date == i),j] <-
nrow(alless1213[which(alless1213$Date == i &
regexpr(regexFun(j), alless1213$CCDD)>=0),])}}
par(mar=c(2,2,2,1))
par(mfrow=c(ceiling(length(flag$Word)/3),3))
for (i in colnames(flagSearch[2:(length(flag$Word)+1)])){
plot(flagSearch$Date, flagSearch[,i], main=i, xlab="Date", ylab="Cases", lty=6,
lwd=1, col=adjustcolor("red", alpha.f=0.6), type="l", xaxt="n")
points(flagSearch$Date, flagSearch[,i], pch=16, cex=1, col=adjustcolor("black", alpha.f=0.4))
axis(side=1, at=flagSearch$Date, labels=format(flagSearch$Date, format="%d %b"), las=3, cex.axis=0.4)
abline(h=flag$Baseline[which(flag$Word == i)], lwd=3, col=adjustcolor("blue", alpha.f=0.2))
legend(x="topleft", bty="n", border=FALSE, cex=0.6, lwd=3, col=adjustcolor("blue", alpha.f=0.2),
legend="2012 seasonal baseline")}
par(mfrow=c(1,1))
###################
#ILI YEAR TO YEAR COMPARISON
###################
heat$j <- as.numeric(format(heat$Date, format="%j"))
#2013
#ili13= spm(heat$ili[which(heat$Date >= "2013-01-01")]~
#             f(heat$j[which(heat$Date >= "2013-01-01")], spar=20), omit.missing=TRUE)
#2012
#ili12= spm(heat$ili[which(heat$Date < "2013-01-01" &
#                            heat$Date >= "2012-01-01")]~
#             f(heat$j[which(heat$Date < "2013-01-01" &
#                              heat$Date >= "2012-01-01")], spar=20), omit.missing=TRUE)
#plot(heat$j, heat$ili, type="n", main="ILI: 2012 vs. 2013",
#     xlab="Date", ylab="Daily cases", xlim=c(250,365))
#points(heat$j[which(heat$Date < "2013-01-01")],
#       heat$ili[which(heat$Date < "2013-01-01")],
#       pch=16, col=adjustcolor("dodgerblue3", alpha.f=0.3))
#points(heat$j[which(heat$Date > "2013-01-01")],
#       heat$ili[which(heat$Date > "2013-01-01")],
#       pch=16, col=adjustcolor("darkred", alpha.f=0.3))
#lines(ili12,shade.col=adjustcolor("dodgerblue3", alpha.f=0.3),
#      rug.col="blue", col="blue")
#lines(ili13,shade.col=adjustcolor("darkred", alpha.f=0.3),
#      rug.col="darkred", col="darkred")
#legend(x="topleft", pch=16, col=c("dodgerblue2", "darkred"),
#       legend=c("2012", "2013"), lwd=2)
###################
#
###################
# jj <- map("county", "florida")
# plot(jj, type="l")
###################
# FUNCTION TIME!!!!
###################
#### MapCases
MapCases <- function(variable, color){
plotvar <- variable
nclr <- max(plotvar+1, na.rm=TRUE) # number of bins
plotclr <- c("white", brewer.pal(nclr, color))
cuts <- cut(plotvar, breaks=nclr,labels=FALSE)
mapCols <- plotclr[cuts]
plot(zip.map, border="grey", col=mapCols, main="Cases yesterday")
legend("bottomleft", # position
legend = seq(0,max(plotvar, na.rm=TRUE), 1),
title = "Cases",
fill = plotclr,
cex = 1 - (0.03*max(plotvar, na.rm=TRUE)),
bty = "n",
border="grey") # border
}
#### MapCasesWeek
MapCasesWeek <- function(variable, color){
plotvar<-variable
nclr<- 5 # number of bins (3-8)
min<- floor(min(plotvar))
max<- ceiling(max(plotvar))
breaks<- (max-min) / nclr
plotclr<- brewer.pal(nclr, color)
class<- classIntervals(plotvar, nclr, style ="fixed", fixedBreaks=seq(min, max, breaks))
colcode<- findColours(class, plotclr)
colcode2<-gsub(",","-", gsub("[[]|[)]|[]]","", names(attr(colcode, "table"))))
plot(zip.map, border="grey", col=colcode, main="Cases yesterday")
legend("bottomleft", # position
legend = colcode2,
title = "Cases",
fill = plotclr,
cex = 0.6,
bty = "n",
border="grey") # border
}
#MapProp
MapProp <- function(variable, color){
plotvar <- variable
nclr <- 5# number of bins
plotcat <- ifelse(variable==0, 0,
ifelse(variable >0 & variable <1, 1,
ifelse(variable==1, 2,
ifelse(variable>1 & variable <=2, 3,
ifelse(variable>2, 4,
0)))))
plotclr <- c("white", brewer.pal(4, color))
cuts <- cut(plotvar, breaks=nclr,labels=FALSE)
mapCols <- plotclr[cuts]
legText <- as.character(100*seq(0,4, 1))
legText <- c("0",
"< 100",
"100",
"101 - 200",
"> 200")
plot(zip.map, border="grey", col=mapCols, main="Yesterday relative to baseline")
legend("bottomleft", # position
legend = legText,
title = "Cases\n(% of expected)",
fill = plotclr,
cex = 0.56,
bty = "n",
border="grey") # border
}
############ DETAILS
par(mfrow=c(1,1))
HistFun <- function(variable, color){
hist(variable, breaks=15, col=adjustcolor("black", alpha.f=0.5),
main="Cases", cex.lab=0.6, cex.main=0.8,
xlab="Baseline daily cases",
ylab="Frequency", border=FALSE)
abline(v=heat$gi[which(heat$Date == yesterday)], lwd=14, lty=1,
col=adjustcolor(color, alpha.f=0.5))
legend(x="topright",
lty=1, lwd=3, legend="Yesterday's\nobservation", cex=0.5,
col=adjustcolor(color, alpha.f=0.5),bty="n")
}
AgeHistFun <- function(variable, baseline, color){
hist(baseline, main="Age", cex.main=0.8, col=adjustcolor("black", alpha.f=0.5), border=FALSE,
ylab="Frequency", xlab="Age", freq=FALSE, cex.lab=0.6)
hist(variable,
col=adjustcolor(color, alpha.f=0.4), ylab="frequency", xlab="age", freq=FALSE, add=TRUE,
border=FALSE)
legend(x="topright", fill=adjustcolor(c("black", color), alpha.f=0.5), bty="n", border=FALSE,
legend=c("2012 baseline", "Yesterday"), cex=0.6)
}
TimeHistFun <- function(variable, baseline, color){
hist(baseline, freq=FALSE, border=FALSE, col=adjustcolor("black", alpha.f=0.5),
main="Check-in time", xlab="Time of day", ylab="Frequency", xaxt="n", ylim=c(0,0.06), cex=0.6, cex.main=0.8,
cex.lab=0.6)
hist(variable, freq=FALSE, border=FALSE,
col=adjustcolor(color, alpha.f=0.5), xaxt="n", add=TRUE, ylim=c(0,0.06))
axis(1, at=c(1,12,24,36,50), labels=c("midnight","6am","noon","6pm","midnight"), cex.axis=0.6)
legend(x="topright", fill=adjustcolor(c("black", color), alpha.f=0.5), bty="n", border=FALSE,
legend=c("2012 baseline", "Yesterday"), cex=0.6)
}
SexFun <- function(variable, baseline, color){
prop <- table(baseline)/length(baseline)
barplot(prop, ylim=c(0,1), col=adjustcolor("black",alpha.f=0.5), border=FALSE)
prop <- table(variable)/length(variable)
barplot(prop, ylim=c(0,1), col=adjustcolor(color,alpha.f=0.5), add=TRUE, border=FALSE,
main="Sex", cex.main=0.8, xlab=NA)
legend(x="topright", fill=adjustcolor(c("black", color), alpha.f=0.5),
legend=c("2012 baseline", "Yesterday"), border=FALSE, bty="n", cex=0.6)
}
SexFun <- function(variable, baseline, color){
variable <- factor(variable, levels=c("F", "M"))
baseline <- factor(baseline, levels=c("F", "M"))
prop <- table(baseline)/length(baseline)
barplot(prop, ylim=c(0,1), col=adjustcolor("black",alpha.f=0.5), border=FALSE)
prop <- table(variable)/length(variable)
barplot(prop, ylim=c(0,1), col=adjustcolor(color,alpha.f=0.5), add=TRUE, border=FALSE,
main="Sex", cex.main=0.8, xlab=NA)
legend(x="topright", fill=adjustcolor(c("black", color), alpha.f=0.5),
legend=c("2012 baseline", "Yesterday"), border=FALSE, bty="n", cex=0.6)
}
RaceFun <- function(variable, baseline, color){
prop <- table(baseline)/length(baseline)
barplot(prop, ylim=c(0,1), col=adjustcolor("black",alpha.f=0.5), border=FALSE,
xaxt="n")
prop <- table(variable)/length(variable)
barplot(prop, ylim=c(0,1), col=adjustcolor(color,alpha.f=0.5), add=TRUE, border=FALSE,
main="Race", cex.main=0.8)
legend(x="topright", fill=adjustcolor(c("black", color), alpha.f=0.5),
legend=c("2012 baseline", "Yesterday"), border=FALSE, bty="n", cex=0.6)
}
TimeSeriesFun <- function(variable, color){
plot(heat$Date, variable, type="n", xlab="Date", ylab="Cases",
xlim=c(yesterday-q, yesterday), cex.axis=0.75, cex.main=0.8, cex.lab=0.6)
axis(side=1, at=heat$Date, labels=format(heat$Date, format="%d\n%b"), cex.axis=0.6)
lines(heat$Date, variable, lty=1, col="darkgrey")
points(heat$Date, variable, pch=1, col="black")
points(heat$Date, variable, pch=20, col=color)
mm <- c(c(heat$Date, today), c(today,rev(heat$Date)))
zzblq <-c(rep(min(quantile(variable[which(heat$Date <= today - 351 &
heat$Date >= today - 380)],
c(.05, .95), na.rm=T)),length(heat$Date)+1),
rev(rep(max(quantile(variable[which(heat$Date <= today - 351 &
heat$Date >= today - 380)],
c(.05, .95), na.rm=T)),length(heat$Date)+1)))
polygon(mm, zzblq, col=adjustcolor(color, alpha.f=0.3), border=FALSE)
abline(h=sum(variable[which(heat$Date <= today - 351 &
heat$Date >= today - 380)])/30,
col=adjustcolor(color, alpha.f=0.3), lty=1, lwd=5)
legend(x="topright", legend=c("Expected", "Normal variation"),
lty=c(1,1), col=c(color,adjustcolor(color, alpha.f=0.3)), ncol=1,
x.intersp=0.2, y.intersp=0.8, bor=T,cex=0.6, lwd=c(1,4), bty="n")
}
HistFun(variable = dist$gi,
color = symcols[1])
AgeHistFun(variable = giyest$Age,
baseline = symOld$Age[which(symOld$bl == TRUE &
symOld$cat == "gi")],
color = symcols[1])
TimeHistFun(variable = giyest$HalfHour,
baseline = symOld$HalfHour[which(symOld$bl == TRUE &
symOld$cat == "gi")],
color = symcols[1])
SexFun(variable = giyest$Sex,
baseline = symOld$Sex[which(symOld$bl == TRUE &
symOld$cat == "gi")],
color= symcols[1])
RaceFun(variable = giyest$race,
baseline = symOld$race[which(symOld$bl == TRUE &
symOld$cat == "gi")],
color=symcols[1])
TimeSeriesFun(variable = heat$ili,
color=symcols[2])
###################
#MAKE OVERALL (LAST 7 days)
###################
overall <- heat[which(heat$Date > yesterday - 7),]
###################
#WEEKLY AND DAILY BARPLOT
###################
weeklysums <- c(
(sum(overall$gi)/blgi/7)*100,
(sum(overall$ili)/blili/7)*100,
(sum(overall$neuro)/blneuro/7)*100,
(sum(overall$rash)/blrash/7)*100,
(sum(overall$resp)/blresp/7)*100)
weeklysums <-round(weeklysums, digits=1)
dailysums <- c(
(overall$gi[7]/blgi)*100,
(overall$ili[7]/blili)*100,
(overall$neuro[7]/blneuro)*100,
(overall$rash[7]/blrash)*100,
(overall$resp[7]/blresp)*100)
dailysums <-round(dailysums, digits=1)
###################
# SPECIAL SEARCHES
###################
rabies <- alless1213[which(regexpr("rabies*|RABIES*|Rabies*|bite*|Bite*|BITE*", alless1213$CCDD)>0 &
grepl("insect|INSECT", alless1213$CCDD) == FALSE),]
rabiesyest <- rabies[which(rabies$Date == yesterday),]
rabies7 <- rabies[which(rabies$Date >= yesterday-6),]
###################
# FUNCTION FOR EXAMINING ANY TERM IN DEPTH
###################
nadiaFun <- function(x){
y <- alless1213[which(regexpr(regexFun(x), alless1213$CCDD)>0),]
z <- y[which(y$Date == yesterday),]
View(z)}
examineFun <- function(x){
alless1213[which(regexpr(regexFun(x), alless1213$CCDD)>0 &
alless1213$Date > yesterday - 6),]
}
spice <- examineFun("MARIJUANA|SYNTHETIC|K2|SPICE")
ebola <- examineFun("LIBERIA|SIERRA LEONE|CONGO|GUINEA|AFRICA|EBOLA")
wnv <- alless[which(grepl(regexFun("WEST NILE|WNV|OCULAR"), alless$CCDD)>0 &
grepl(regexFun("MOQUITO"), alless$CCDD)  &
alless$Date > yesterday - 6),]
#nadiaFun("SCABIES")
#nadiaFun("BITE")
#nadiaFun("STREP")
####################
# MERS detection
####################
# mersWords <- paste(regexFun(c("Saudi","Arab","Emirat","UAE","Qatar","Oman",
#                         "Jordan","Kuwait","Yemen","Leban","Lebon","Middle",
#                         "mers", "MERS", "Mers")), collapse="|")
# mersSymptoms <- paste(regexFun(c("respir","severe","sob","shortness","breath",
#                                 "fever","pneumo","diar","vomit","naus")),
#                                collapse="|")
# mers <- alless[which(grepl(mersWords, alless$CCDD) == TRUE &
#                        grepl(mersSymptoms, alless$CCDD) == TRUE),]
#
# mers2 <- alless2[which(grepl(mersWords, alless2$CCDD) == TRUE &
#                        grepl(mersSymptoms, alless2$CCDD) == TRUE),]
#
# mers <- rbind(mers,mers2)
#
#
# nrow(mers)
###################
# SURFACE FUNCTION
##################
library(gstat)
library(geoR)
library(rgdal)
library(scatterplot3d)
library(RColorBrewer)
# Read in boundary
#boundary <- readOGR("E:/fdoh/private/surv/Alachua_Boundary", "Alachua_Boundary")
boundary <- zip.map # have to do this due to lack of projection system
library(maptools)
boundary <- unionSpatialPolygons(boundary, rep(1, length(boundary@polygons)))
# # Read in population
# pop <- readOGR("E:/fdoh/private/surv/Alachua_CT_POP", "Alachua_CT_POP")
# Define color vector
my_colors <- colorRampPalette(c("blue", "red"))(100)
SurfaceFun <- function(disease = "ili",
boundary_shape = boundary){
# getting coordinates of alachua boundary
boundary_points <- boundary@polygons[[1]]@Polygons
boundary_points <- boundary_points[[1]]@coords
# Get trap locations and data values
a <- data.frame("x" = zip.map$x,
"y" = zip.map$y,
"z" = zip[,paste0(disease, "per")])
# Make into a geodata object
b <- as.geodata(a)
# Predict multiple points in Alachua County's boundary
x <- seq(min(boundary_points[,1]), max(boundary_points[,1]), length = 100)
y <- seq(min(boundary_points[,2]), max(boundary_points[,2]), length = 100)
# Make a grid of those points
pred.grid <- expand.grid(x,y)
# kriging calculations
kc <- krige.conv(geodata = b, coords = b$coords, data = b$data,
locations = pred.grid,
borders = boundary_points,
#borders = boundary@polygons,
# borders = ALACHUA BORDERS!,
krige = krige.control(type.krige = "ok",
cov.pars = c(5000,10000000))) #10, 3.33 # what is this?
# Plot!
# displaying predicted values
image(kc, loc = pred.grid,
col = my_colors,
xlab=NA, ylab=NA,
xaxt = "n",
yaxt = "n",
xpd = NA,
bty = "n")
# Define percentiles for legend
legtemp <-  round(quantile(kc$predict, probs = seq(0,1,, length = 10)))
legend(x="topright",
fill = my_colors[c(1,11,22,33,44,55,66,77,88,100)],
legend = c(legtemp[1], NA, NA, legtemp[4], NA, NA, legtemp[7], NA, NA, legtemp[10]),
border = FALSE,
bty = "n",
ncol = 1,
y.intersp = 0.5,
title = "Interpolation",
cex = 0.75)
}
SurfaceFun("neuro")
######################
#******SAVE
#******IMAGE
######################
save.image(paste(survwd, "/",
today,
"/",
"zap.Rdata", sep=""))
par(mfrow=c(1,1))
tot.time <- as.numeric(Sys.time() - start.time)
cat(paste0("\n\n\n\n\n\n\n\n",  "Congratulations!!!",
"\n", "That took about ", round(tot.time, digits=0), " minutes",
"\n\n",
"Now you can run the zap.Rnw file in order to produce a surveillance report",
"\n\n\n") )
# RESPIRATORY AMONG YOUTH
library(dplyr)
symOld$kid <- ifelse(symOld$Age >= 18, FALSE, TRUE)
x <- symOld %>%
filter(cat == "gi", kid == TRUE) %>%
group_by(Date) %>%
summarise(count = n())
x
plot(x$Date, x$count, xlim = c(max(x$Date) - 20, max(x$Date)),
xlab = "Last 20 days", ylab = "Cases",
type = "l", col = "darkblue")
